<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.esfile.mapper.UserMapper">

    <!-- 结果映射 -->
    <resultMap id="UserResultMap" type="com.esfile.entity.mybatis.User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="avatar" property="avatar" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="dept_id" property="deptId" jdbcType="BIGINT"/>
        <result column="login_fail_count" property="loginFailCount" jdbcType="INTEGER"/>
        <result column="last_login_time" property="lastLoginTime" jdbcType="TIMESTAMP"/>
        <result column="last_login_ip" property="lastLoginIp" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="create_by" property="createBy" jdbcType="BIGINT"/>
        <result column="update_by" property="updateBy" jdbcType="BIGINT"/>
    </resultMap>

    <!-- 基础字段 -->
    <sql id="Base_Column_List">
        id, username, password, real_name, email, phone, avatar, gender, status, 
        dept_id, login_fail_count, last_login_time, last_login_ip, 
        create_time, update_time, create_by, update_by
    </sql>

    <!-- 根据ID查询用户 -->
    <select id="selectById" parameterType="java.lang.Long" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM user
        WHERE id = #{id}
    </select>

    <!-- 根据用户名查询用户 -->
    <select id="selectByUsername" parameterType="java.lang.String" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM user
        WHERE username = #{username}
    </select>

    <!-- 根据邮箱查询用户 -->
    <select id="selectByEmail" parameterType="java.lang.String" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM user
        WHERE email = #{email}
    </select>

    <!-- 分页查询用户列表 -->
    <select id="selectUserList" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM user
        <where>
            <if test="keyword != null and keyword != ''">
                AND (username LIKE CONCAT('%', #{keyword}, '%') 
                     OR real_name LIKE CONCAT('%', #{keyword}, '%')
                     OR email LIKE CONCAT('%', #{keyword}, '%'))
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
            <if test="role != null and role != ''">
                AND id IN (
                    SELECT DISTINCT ur.user_id 
                    FROM user_role ur 
                    JOIN role r ON ur.role_id = r.id 
                    WHERE r.role_name LIKE CONCAT('%', #{role}, '%')
                )
            </if>
            <if test="dept != null and dept != ''">
                AND dept_id IN (
                    SELECT id FROM dept WHERE dept_name LIKE CONCAT('%', #{dept}, '%')
                )
            </if>
        </where>
        ORDER BY create_time DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 统计用户数量 -->
    <select id="countUsers" resultType="long">
        SELECT COUNT(*)
        FROM user
        <where>
            <if test="keyword != null and keyword != ''">
                AND (username LIKE CONCAT('%', #{keyword}, '%') 
                     OR real_name LIKE CONCAT('%', #{keyword}, '%')
                     OR email LIKE CONCAT('%', #{keyword}, '%'))
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
            <if test="role != null and role != ''">
                AND id IN (
                    SELECT DISTINCT ur.user_id 
                    FROM user_role ur 
                    JOIN role r ON ur.role_id = r.id 
                    WHERE r.role_name LIKE CONCAT('%', #{role}, '%')
                )
            </if>
            <if test="dept != null and dept != ''">
                AND dept_id IN (
                    SELECT id FROM dept WHERE dept_name LIKE CONCAT('%', #{dept}, '%')
                )
            </if>
        </where>
    </select>

    <!-- 根据时间范围统计用户数量 -->
    <select id="countUsersByDateRange" resultType="long">
        SELECT COUNT(*)
        FROM user
        WHERE create_time BETWEEN #{startTime} AND #{endTime}
    </select>

    <!-- 插入用户 -->
    <insert id="insert" parameterType="com.esfile.entity.mybatis.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (
            username, password, real_name, email, phone, avatar, gender, status, 
            dept_id, login_fail_count, last_login_time, last_login_ip, 
            create_time, update_time, create_by, update_by
        ) VALUES (
            #{username}, #{password}, #{realName}, #{email}, #{phone}, #{avatar}, #{gender}, #{status}, 
            #{deptId}, #{loginFailCount}, #{lastLoginTime}, #{lastLoginIp}, 
            #{createTime}, #{updateTime}, #{createBy}, #{updateBy}
        )
    </insert>

    <!-- 更新用户 -->
    <update id="updateById" parameterType="com.esfile.entity.mybatis.User">
        UPDATE user
        <set>
            <if test="username != null">username = #{username},</if>
            <if test="password != null">password = #{password},</if>
            <if test="realName != null">real_name = #{realName},</if>
            <if test="email != null">email = #{email},</if>
            <if test="phone != null">phone = #{phone},</if>
            <if test="avatar != null">avatar = #{avatar},</if>
            <if test="gender != null">gender = #{gender},</if>
            <if test="status != null">status = #{status},</if>
            <if test="deptId != null">dept_id = #{deptId},</if>
            <if test="loginFailCount != null">login_fail_count = #{loginFailCount},</if>
            <if test="lastLoginTime != null">last_login_time = #{lastLoginTime},</if>
            <if test="lastLoginIp != null">last_login_ip = #{lastLoginIp},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
        </set>
        WHERE id = #{id}
    </update>

    <!-- 根据ID删除用户 -->
    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM user WHERE id = #{id}
    </delete>

    <!-- 批量删除用户 -->
    <delete id="batchDeleteByIds">
        DELETE FROM user WHERE id IN
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!-- 插入用户角色关联 -->
    <insert id="insertUserRole" parameterType="com.esfile.entity.mybatis.UserRole">
        INSERT INTO user_role (user_id, role_id, create_time, update_time)
        VALUES (#{userId}, #{roleId}, #{createTime}, #{updateTime})
    </insert>

    <!-- 删除用户角色关联 -->
    <delete id="deleteUserRoles" parameterType="java.lang.Long">
        DELETE FROM user_role WHERE user_id = #{userId}
    </delete>

    <!-- 查询用户角色 -->
    <select id="selectUserRoles" parameterType="java.lang.Long" resultType="java.util.Map">
        SELECT 
            ur.id,
            ur.user_id as userId,
            ur.role_id as roleId,
            r.role_name as roleName,
            r.role_code as roleCode,
            r.description as roleDescription
        FROM user_role ur
        JOIN role r ON ur.role_id = r.id
        WHERE ur.user_id = #{userId}
    </select>

    <!-- 查询角色权限 -->
    <select id="selectRolePermissions" parameterType="java.lang.Long" resultType="java.lang.String">
        SELECT DISTINCT p.permission_code
        FROM role_permission rp
        JOIN permission p ON rp.permission_id = p.id
        WHERE rp.role_id = #{roleId}
    </select>

</mapper>
