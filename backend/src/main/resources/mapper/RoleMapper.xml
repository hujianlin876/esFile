<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.esfile.mapper.RoleMapper">

    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.esfile.entity.mybatis.Role">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="role_name" property="roleName" jdbcType="VARCHAR"/>
        <result column="role_code" property="roleCode" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="sort" property="sort" jdbcType="INTEGER"/>
        <result column="is_system" property="isSystem" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="deleted" property="deleted" jdbcType="INTEGER"/>
    </resultMap>

    <!-- 基础字段 -->
    <sql id="Base_Column_List">
        id, role_name, role_code, description, status, sort, is_system, 
        create_time, update_time, deleted
    </sql>

    <!-- 插入角色 -->
    <insert id="insert" parameterType="com.esfile.entity.mybatis.Role" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_role (
            role_name, role_code, description, status, sort, is_system,
            create_time, update_time, deleted
        ) VALUES (
            #{roleName}, #{roleCode}, #{description}, #{status}, #{sort}, #{isSystem},
            NOW(), NOW(), 0
        )
    </insert>

    <!-- 根据ID更新角色 -->
    <update id="updateById" parameterType="com.esfile.entity.mybatis.Role">
        UPDATE sys_role
        SET role_name = #{roleName},
            role_code = #{roleCode},
            description = #{description},
            status = #{status},
            sort = #{sort},
            is_system = #{isSystem},
            update_time = NOW()
        WHERE id = #{id} AND deleted = 0
    </update>

    <!-- 根据ID删除角色 -->
    <update id="deleteById" parameterType="java.lang.Long">
        UPDATE sys_role SET deleted = 1, update_time = NOW() WHERE id = #{id}
    </update>

    <!-- 根据ID查询角色 -->
    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_role
        WHERE id = #{id} AND deleted = 0
    </select>

    <!-- 根据角色编码查询角色 -->
    <select id="selectByRoleCode" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_role
        WHERE role_code = #{roleCode} AND deleted = 0
    </select>

    <!-- 查询所有角色 -->
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_role
        WHERE deleted = 0
        ORDER BY sort ASC, create_time DESC
    </select>

    <!-- 分页查询角色 -->
    <select id="selectPage" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_role
        WHERE deleted = 0
        ORDER BY sort ASC, create_time DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 查询角色总数 -->
    <select id="selectCount" resultType="long">
        SELECT COUNT(*)
        FROM sys_role
        WHERE deleted = 0
    </select>

    <!-- 根据用户ID查询角色列表 -->
    <select id="selectByUserId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT r.<include refid="Base_Column_List"/>
        FROM sys_role r
        INNER JOIN sys_user_role ur ON r.id = ur.role_id
        WHERE ur.user_id = #{userId} AND r.deleted = 0 AND ur.deleted = 0
        ORDER BY r.sort ASC
    </select>

    <!-- 根据状态查询角色列表 -->
    <select id="selectByStatus" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_role
        WHERE status = #{status} AND deleted = 0
        ORDER BY sort ASC, create_time DESC
    </select>

</mapper>
